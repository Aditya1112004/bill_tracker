<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales-Purchase Analysis</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/analysis.css">
</head>
<body>
    
  <a href="/" style="position: absolute; left: 20px; top: 10px; text-decoration: none; font-size: 18px;">&larr; Back</a>
  <button onclick="window.location.reload()" title="Reload" style="position: absolute; right: 30px; top: 18px; background: #fff; border: none; border-radius: 50%; box-shadow: 0 2px 8px rgba(34,34,59,0.10); width: 38px; height: 38px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 20px; color: #3a86ff; transition: background 0.2s;">
    &#x21bb;
  </button>
    <div class="container">
      
        <h1 class="main-title">SALES-PURCHASE ANALYSIS</h1>

        <div class="form-section">
            <form action="/analysis" method="POST">
                <div class="form-group">
                    <label for="sales_id">Select Sales ID:</label>
                    <input type="text" id="sales_id" name="sales_id" list="sales_options" placeholder="Type or select Sales ID" required>
                    <datalist id="sales_options">
                        <% sales.forEach(sale => { %>
                            <option value="<%= sale.id %>"><%= sale.debtors %> (Bill: <%= sale.bill_amount %>, Received: <%= sale.received %>, Invoice NO: <%= sale.invoice_no%>, Bill Amount: <%=sale.bill_amount%>)</option>
                        <% }); %>
                    </datalist>
                </div>
                <div id="purchase-inputs" class="form-group purchase-inputs">
                    <label>Add Purchase IDs:</label>
                    <div class="purchase-input-row">
                        <input type="text" name="purchase_ids" list="purchase_options" placeholder="Type or select Purchase ID" required>
                        <button type="button" class="remove-purchase-btn" onclick="removePurchaseInput(this)">Ã—</button>
                    </div>
                    <datalist id="purchase_options">
                        <% purchases.forEach(purchase => { %>
                            <option value="<%= purchase.id %>"><%= purchase.creditors %> - (Credit: <%= purchase.credit_amt %>, Invoice No: <%= purchase.invoice_no%>, Date <%=purchase.date%>)</option>
                        <% }); %>
                    </datalist>
                </div>
                <button type="button" class="add-purchase-btn" onclick="addPurchaseInput()" style="font-size: 10px;">Add Another Purchase ID</button>
                <button type="submit" class="home-button" style="font-size: 10px;"> Analyze & Save</button>
                    <!-- <div class="form-group"></div> -->
            </form>
        </div>

        <div class="form-section" style="text-align:center; margin-top: 0px;">
            <h2>Export Analysis Data</h2>
            <a href="/analysis/excel/preview" class="home-button" style="background: linear-gradient(90deg, #248a48 0%, #1eb930 100%); margin-bottom: 0;">Excel Export Preview</a>
        </div>


        <div class="data-section">
            <h2>search Analysis Data</h2>
            <div class="search-container" style="margin-bottom: 20px;">
                <input type="text" id="searchInput" placeholder="Search by Sales ID, Debtor, or Invoice No." style="width: 70%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; margin-right: 10px;">
                <button id="searchButton" class="home-button" style="background: linear-gradient(90deg, #3a86ff 0%, #4361ee 100%);">Search</button>
            </div>
            <% if (spAnalysis.length > 0) { %>
                <% 
                    function getSidNumber(entry) {
                        try {
                            const idStr = String(entry?.salesEntry?.id || '');
                            const match = idStr.match(/(\d+)/);
                            return match ? parseInt(match[1], 10) : -Infinity;
                        } catch (_) { return -Infinity; }
                    }
                    const sortedAnalysis = spAnalysis.slice().sort((a,b) => getSidNumber(b) - getSidNumber(a));
                    sortedAnalysis.forEach(analysis => { 
                %>
                    <div class="analysis-card" data-sales-id="<%= analysis.salesEntry.id %>" data-debtor="<%= analysis.salesEntry.debtors %>" data-invoice="<%= analysis.salesEntry.invoice_no %>">
                        <div class="analysis-header-row">
                            <h3>Analysis for Sales ID: <%= String(analysis.salesEntry.id || '').replace(/^sid-/, 's-') %></h3>
                            <p><strong>Analysis Date:</strong> <%= new Date(analysis.analysisDate).toLocaleString() %></p>
                            <div class="action-buttons">
                                <form action="/analysis/delete/<%= analysis.id %>" method="POST" style="display:inline;" onsubmit="return confirmDelete()">
                                    <button type="submit" class="delete-btn">Delete</button>
                                </form>
                                <a href="/analysis/edit/<%= analysis.id %>" class="edit-btn">Edit</a>
                            </div>
                        </div>
                        
                        <div class="analysis-content">
                            <div class="sales-column">
                                <h4>Sales Details:</h4>
                                <div class="sales-rows">
                                    <div class="sales-row-inline">
                                        <span class="detail-group"><strong>ID:</strong> <span><%= String(analysis.salesEntry.id || '').replace(/^sid-/, 's-') %></span></span>
                                        <span class="detail-group"><strong>Invoice No.:</strong> <span><%= analysis.salesEntry.invoice_no %></span></span>
                                        <span class="detail-group"><strong>Bill Amount:</strong> <span><%= analysis.salesEntry.bill_amount %></span></span>
                                    </div>
                                    <div class="sales-row-block">
                                        <span class="detail-group"><strong>Debtor:</strong> <span><%= analysis.salesEntry.debtors %></span></span>
                                    </div>
                                </div>
                                <p class="total-row"><strong>Total Sales Bill:</strong> <span><%= analysis.salesEntry.bill_amount.toFixed(2) %></span></p>
                            </div>

                            <div class="purchase-column">
                                <h4>Associated Purchase Details:</h4>
                                <% if (analysis.purchaseEntries && analysis.purchaseEntries.length > 0) { %>
                                    <div class="purchase-item-container">
                                        <% 
                                            let totalPurchaseCredit = 0;
                                            analysis.purchaseEntries.forEach(purchase => {
                                                totalPurchaseCredit += (purchase.credit_amt || 0);
                                        %> 
                                            <div class="purchase-item">
                                                <p class="purchase-detail-line three-col">
                                                    <span class="detail-group"><strong>ID:</strong> <%= String(purchase.id || '').replace(/^pid-/, 'p-') %></span>
                                                    <span class="detail-group"><strong>Invoice No.:</strong> <%= purchase.invoice_no %></span>
                                                    <span class="detail-group"><strong>Credit Amount:</strong> <%= purchase.credit_amt %></span>
                                                </p>
                                                <p class="purchase-detail-line one-col">
                                                    <span class="detail-group"><strong>Creditor:</strong> <%= purchase.creditors %></span>
                                                </p>
                                            </div>
                                        <% }); %>
                                    </div>
                                    <p class="total-row"><strong>Total Purchase Credit:</strong> <span><%= totalPurchaseCredit.toFixed(2) %></span></p>
                                <% } else { %>
                                    <p class="total-row">No purchase entries associated.</p>
                                    <p class="total-row"><strong>Total Purchase Credit:</strong> <span>0.00</span></p>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No analysis data saved yet.</p>
            <% } %>
        </div>
    </div>

    <script>
        // Function to add more purchase input fields
        function addPurchaseInput() {
            const container = document.getElementById('purchase-inputs');
            const firstInputRow = container.querySelector('.purchase-input-row');
            const newRow = firstInputRow.cloneNode(true);
            const input = newRow.querySelector('input');
            input.value = '';
            container.appendChild(newRow);
        }

        function removePurchaseInput(buttonEl) {
            const container = document.getElementById('purchase-inputs');
            const rows = container.querySelectorAll('.purchase-input-row');
            if (rows.length <= 1) {
                // Keep at least one row present
                rows[0].querySelector('input').value = '';
                return;
            }
            const row = buttonEl.closest('.purchase-input-row');
            if (row) row.remove();
        }

        // Function to confirm delete action
        function confirmDelete() {
            return confirm('Are you sure you want to delete this analysis entry? This action cannot be undone.');
        }

        // Function to handle delete with better UX
        function deleteAnalysis(analysisId) {
            if (confirmDelete()) {
                // Create a form and submit it
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/analysis/delete/${analysisId}`;
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Get elements for the entry input container and toggle button
        const entryInputContainer = document.querySelector('.form-section:first-of-type');
        const toggleEntryButton = document.createElement('button');
        toggleEntryButton.textContent = 'Add New Analysis Entry';
        toggleEntryButton.className = 'home-button'; // Re-use existing button style
        toggleEntryButton.style.marginBottom = '20px';
        toggleEntryButton.style.display = 'block'; // Make it a block element to take full width
        toggleEntryButton.style.margin = '20px auto'; // Center the button
        
        // Insert the toggle button before the first form-section
        entryInputContainer.parentNode.insertBefore(toggleEntryButton, entryInputContainer);

        // Initially hide the entry input container
        entryInputContainer.style.display = 'none';

        // Toggle functionality
        toggleEntryButton.addEventListener('click', () => {
            if (entryInputContainer.style.display === 'none') {
                entryInputContainer.style.display = 'block';
                toggleEntryButton.textContent = 'Hide New Analysis Entry';
            } else {
                entryInputContainer.style.display = 'none';
                toggleEntryButton.textContent = 'Add New Analysis Entry';
            }
        });

        // Search functionality
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const analysisCards = document.querySelectorAll('.analysis-card');

        searchButton.addEventListener('click', (e) => { e.preventDefault(); performSearch(); });
        searchInput.addEventListener('keyup', (event) => {
            if (event.key === 'Enter') {
                performSearch();
            }
        });

        function performSearch() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            analysisCards.forEach(card => {
                const salesId = (card.dataset.salesId || '').toLowerCase();
                const debtor = (card.dataset.debtor || '').toLowerCase();
                const invoiceNo = (card.dataset.invoice || '').toLowerCase();
                const headerText = (card.querySelector('h3')?.textContent || '').toLowerCase();
                const match = !searchTerm || salesId.includes(searchTerm) || debtor.includes(searchTerm) || invoiceNo.includes(searchTerm) || headerText.includes(searchTerm);
                card.style.display = match ? 'block' : 'none';
            });
        }
    </script>
</body>
</html>

