<% const uniqueCreditors = [...new Set(purchases.map(entry => entry.creditors))]; %>
<%
function parseDMY(dateStr) {
  if (dateStr === undefined || dateStr === null) return new Date('Invalid');
  if (typeof dateStr === 'number') return new Date((dateStr - 25569) * 86400 * 1000); // Excel serial
  const s = String(dateStr).trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) {
    return new Date(s); // ISO already
  }
  if (/^\d{2}-\d{2}-\d{4}$/.test(s)) {
    const [a, b, y] = s.split('-').map(Number);
    const dayFirst = a > 12; // if first part >12, treat as DD-MM-YYYY
    const dd = dayFirst ? a : b;
    const mm = dayFirst ? b : a;
    return new Date(`${y}-${String(mm).padStart(2,'0')}-${String(dd).padStart(2,'0')}`);
  }
  if (!isNaN(Date.parse(s))) return new Date(s);
  return new Date('Invalid');
}
function daysBetweenToday(dateStr) {
  const d = new Date(dateStr);
  if (isNaN(d)) return '-';
  const today = new Date();
  today.setHours(0,0,0,0);
  d.setHours(0,0,0,0);
  return Math.floor((today - d) / (1000 * 60 * 60 * 24));
}
function formatDateForInput(dateStr) {
  if (dateStr === undefined || dateStr === null) return '';
  const s = String(dateStr).trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s; // already ISO
  const d = parseDMY(s);
  if (isNaN(d)) return '';
  const yyyy = d.getFullYear();
  const mm = String(d.getMonth() + 1).padStart(2, '0');
  const dd = String(d.getDate()).padStart(2, '0');
  return `${yyyy}-${mm}-${dd}`;
}

function parseCellNumber(text) {
  if (text === undefined || text === null) return 0;
  const cleaned = String(text).replace(/[^0-9.\-]/g, '');
  const num = parseFloat(cleaned);
  return isNaN(num) ? 0 : num;
}
let totalDebit = 0, totalCredit = 0, totalPending = 0;
purchases.sort((a, b) => parseDMY(a.date) - parseDMY(b.date)).forEach(entry => {
  const debit = Number(entry.debit_amt) || 0;
  const credit = Number(entry.credit_amt) || 0;
  totalDebit += debit;
  totalCredit += credit;
  totalPending += (credit - debit);
}); %>
<!DOCTYPE html>
<html>
<head>
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>Purchase Payment Pending</title>
 <link rel="stylesheet" href="/style.css">
 <style>
 /* Basic styling for the filter menu to ensure it looks good and is functional */
 .filter-menu-container {
   position: relative;
   display: inline-block;
  }

  #dayFilterMenu {
   width: 150px;
   display: none;
   position: absolute;
   top: 25px; /* Adjusted to be closer to the icon */
   right: 0;
   background: #fff;
   border: 1px solid #e0e0e0;
   border-radius: 8px;
   box-shadow: 0 4px 10px rgba(0,0,0,0.1);
   z-index: 10;
   overflow: hidden;
  }
  #dayFilterMenu div {
   padding: 10px 12px;
   cursor: pointer;
   color: #555;
   transition: background-color 0.2s ease;
   border-bottom: 1px solid #e0e0e0;
  }
  #dayFilterMenu div:last-child {
   border-bottom: none;
  }
  #dayFilterMenu div:hover {
   background-color: #f0f4f8;
  }
    /* This style is to make the `&#x1F50D;` icon slightly larger and more clickable */
    .search-icon {
        font-size: 20px;
        vertical-align: middle;
    }
    
    /* Ensure the search bar is nicely styled */
    input[type="text"], input[type="date"], input[type="number"], .btn, .toolbar {
        border-radius: 8px;
    }
    .btn {
        padding: 8px 16px;
    }
 </style>
 <script>
    // A helper function to parse numbers from table cells that might contain other characters
    function parseCellNumber(text) {
        return parseFloat(text.replace(/[^0-9.-]+/g, "")) || 0;
    }

  function filterTable() {
   var input = document.getElementById('searchInput');
   var filter = input.value.toLowerCase();
   var table = document.getElementById('purchaseTable');
   var trs = table.querySelectorAll('tr.data-row');
   for (var i = 0; i < trs.length; i++) {
    var td = trs[i].getElementsByTagName('td')[2];
    if (td) {
     var txtValue = td.textContent || td.innerText;
     trs[i].style.display = txtValue.toLowerCase().indexOf(filter) > -1 ? '' : 'none';
    }
   }
   updateTotalsDisplay(); // Call update after filtering
  }
  function toggleEditForm(id) {
   var form = document.getElementById('edit-form-' + id);
   form.style.display = form.style.display === 'none' ? 'table-row' : 'none';
  }
  function closeEditForm(id) {
   var form = document.getElementById('edit-form-' + id);
   form.style.display = 'none';
  }
  
  function showDayFilterMenu() {
   var menu = document.getElementById('dayFilterMenu');
   menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
  }
  function filterByDays(range) {
   var table = document.getElementById('purchaseTable');
   // Select only the data rows, not the header or edit forms
   var trs = table.querySelectorAll('tr.data-row'); 
   for (var i = 0; i < trs.length; i++) {
    var td = trs[i].getElementsByTagName('td')[7]; // Index 7 is the correct 'Days' column
    if (td) {
     var val = parseInt(td.textContent || td.innerText);
     var show = false;
     if (range === '0-25' && val >= 0 && val <= 25) show = true;
     if (range === '26-30' && val >= 26 && val <= 30) show = true;
     if (range === 'above30' && val > 30) show = true;
     trs[i].style.display = show ? '' : 'none';
    }
   }
   document.getElementById('dayFilterMenu').style.display = 'none';
   updateTotalsDisplay(); 
  }
  function clearDayFilter() {
   var table = document.getElementById('purchaseTable');
   var trs = table.querySelectorAll('tr.data-row');
   for (var i = 0; i < trs.length; i++) {
    trs[i].style.display = '';
   }
   document.getElementById('dayFilterMenu').style.display = 'none';
   updateTotalsDisplay(); 
  }

  function updateTotalsDisplay() {
   let currentTotalCredit = 0;
   let currentTotalDebit = 0;
   let currentTotalPending = 0;

   var table = document.getElementById('purchaseTable');
   // Select only the visible data rows to get the correct totals
   var trs = table.querySelectorAll('tr.data-row');
   for (var i = 0; i < trs.length; i++) {
    if (trs[i].style.display !== 'none') {
     // Use the correct cell indices based on your table structure
     const creditAmount = parseCellNumber(trs[i].getElementsByTagName('td')[5].innerText);
     const debitAmount = parseCellNumber(trs[i].getElementsByTagName('td')[6].innerText);
     const payableAmount = parseCellNumber(trs[i].getElementsByTagName('td')[8].innerText);

     currentTotalCredit += creditAmount;
     currentTotalDebit += debitAmount;
     currentTotalPending += payableAmount;
    }
   }
   document.getElementById('totalCreditDisplay').innerText = currentTotalCredit.toFixed(2);
   document.getElementById('totalDebitDisplay').innerText = currentTotalDebit.toFixed(2);
   document.getElementById('totalPendingDisplay').innerText = currentTotalPending.toFixed(2);
  }
    
    function formatDateForInput(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

  window.onload = updateTotalsDisplay;
 </script>
</head>
<body>
 <a href="/" style="position: absolute; left: 20px; top: 10px; text-decoration: none; font-size: 18px;">&larr; Back</a>
 <button onclick="window.location.reload()" title="Reload" style="position: absolute; right: 30px; top: 18px; background: #fff; border: none; border-radius: 50%; box-shadow: 0 2px 8px rgba(34,34,59,0.10); width: 38px; height: 38px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 20px; color: #3a86ff; transition: background 0.2s;">
  &#x21bb;
 </button>
 <h1>Purchase Payment Pending</h1>
 <div class="toolbar mt-3">
  <a href="/purchase/partywise" target="_blank" class="btn btn-outline">Creditors Total Payable</a>
  <a href="/purchase/excel/preview" target="_blank" class="btn btn-success">Download Excel</a>
  <a href="/purchase/all/pdf" target="_blank" class="btn btn-success">Download PDF</a>
  
  <input id="searchInput" list="search-creditors-list" placeholder="Search by Creditor" onkeyup="filterTable()"/>
  <datalist id="search-creditors-list">
   <% uniqueCreditors.forEach(creditor => { %>
    <option value="<%= creditor %>"></option>
   <% }); %>
  </datalist>
  <button class="btn btn-primary" onclick="filterTable()" style="font-size: 12px;">Search</button>
 </div>
 <div id="new-entry-form" class="section" style="display:block; max-width: 1000px; margin-left:auto; margin-right:auto;">
  <form action="/purchase/new" method="post" style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center; justify-content: center;">
   <input name="creditors" list="creditors-list" placeholder="Creditors" required style="flex:1; min-width:120px;">
   <datalist id="creditors-list">
    <% uniqueCreditors.forEach(creditor => { %>
     <option value="<%= creditor %>"></option>
    <% }); %>
   </datalist>
   <input name="date" type="date" required style="flex:1; min-width:120px;">
   <input name="invoice_no" placeholder="Invoice No." required style="flex:1; min-width:120px;">
   <input name="credit_amt" type="number" step="0.01" placeholder="Bill Amount" required style="flex:1; min-width:120px;">
   <input name="debit_amt" type="number" step="0.01" placeholder="Debit Amount (default 0)" style="flex:1; min-width:120px;">
   
   <button class="btn btn-primary" type="submit" style="font-size: 12px;">Save</button>
  </form>
 </div>
 <div class="page-container" style="width:90%;margin:0 auto;">
  <div class="toolbar" style="justify-content:flex-end;">
   <span>Total Bill Amt: <span id="totalCreditDisplay"><%= totalCredit.toFixed(2) %></span></span>
   <span style="margin: 0 10px ;"></span>
   <span>Total Debit: <span id="totalDebitDisplay"><%= totalDebit.toFixed(2) %></span></span>
   <span style="margin: 0 10px ;"></span>
   <span class="badge badge-danger">Total Payable: <span id="totalPendingDisplay"><%= totalPending.toFixed(2) %></span></span>
  </div>
 </div>
 <div class="table-wrap" style="width:90%; margin:0 auto;">
 <table id="purchaseTable" class="table">
  <thead>
   <tr>
    <th>Sr</th>
    <th>ID</th>
    <th>Creditors</th>
    <th>Date</th>
    <th>Invoice No.</th>
    <th>Bill Amount</th>
    <th>Debit Note</th>
    <th>Days</th>
    <th>Payable</th>
    <th>Actions
     <span style="cursor:pointer; margin-left:10px; position:relative; " onclick="showDayFilterMenu()">
                <span class="search-icon">&#x1F50D;</span>
      <div id="dayFilterMenu">
       <div onclick="filterByDays('0-25')">0-25 days</div>
       <div onclick="filterByDays('26-30')">26-30 days</div>
       <div onclick="filterByDays('above30')">Above 30 days</div>
       <!-- <div onclick="clearDayFilter()">Clear Filter</div> -->
      </div>
     </span>
    </th>
   </tr>
  </thead>
  <tbody>
   <% purchases.sort((a, b) => daysBetweenToday(b.date) - daysBetweenToday(a.date)).forEach((entry, i) => { %>
    <tr class="data-row">
     <td><%= i + 1 %></td>
     <td><%= entry.id %></td>
     <td><%= entry.creditors %></td>
     <td><%= entry.date %></td>
     <td><%= entry.invoice_no %></td>
     <td><%= (entry.credit_amt).toFixed(1) %></td>
     <td><%= entry.debit_amt ? entry.debit_amt : 0 %></td>
     <td><%= daysBetweenToday(entry.date) %></td>
     <td><%= (entry.credit_amt - (entry.debit_amt ? entry.debit_amt : 0)).toFixed(2) %></td>
     <td>
      <button type="button" onclick="toggleEditForm('<%= entry.id %>')" class="btn btn-success" style="font-size: 10px; margin: 0;padding: 5px;">Edit</button>
      <form action="/purchase/delete/<%= entry.id %>" method="POST" style="display:inline;">
       <button class="btn btn-danger" type="submit" onclick="return confirm('Are you sure you want to delete this entry?');" style="font-size: 10px; margin: 0;padding: 5px;">Delete</button>
      </form>
     </td>
    </tr>
    <tr id="edit-form-<%= entry.id %>" style="display:none; background:#f4f6fb;">
     <td colspan="11">
      <form class="purchase-edit-form" action="/purchase/edit/<%= entry.id %>" method="post" style="display: flex; flex-wrap: wrap; gap: 12px; align-items: flex-end; justify-content: flex-start; width:100%;">
       <div style="display:flex; flex-direction:column; gap:4px; min-width:200px; flex:1;">
        <label>Creditor</label>
        <input name="creditors" value="<%= entry.creditors %>" required style="width:100%;">
       </div>
       <div style="display:flex; flex-direction:column; gap:4px; min-width:160px; flex:1;">
        <label>Date</label>
        <input name="date" type="date" value="<%= formatDateForInput(entry.date) %>" placeholder="YYYY-MM-DD" required style="width:100%;">
       </div>
       <div style="display:flex; flex-direction:column; gap:4px; min-width:160px; flex:1;">
        <label>Invoice No.</label>
        <input name="invoice_no" value="<%= entry.invoice_no %>" required style="width:100%;">
       </div>
       <div style="display:flex; flex-direction:column; gap:4px; min-width:160px; flex:1;">
        <label>Bill Amount</label>
        <input name="credit_amt" type="number" step="0.01" value="<%= entry.credit_amt %>" placeholder="Bill Amount" required style="width:100%;">
       </div>
       <div style="display:flex; flex-direction:column; gap:4px; min-width:160px; flex:1;">
        <label>Debit Amount</label>
        <input name="debit_amt" type="number" step="0.01" value="<%= entry.debit_amt ? entry.debit_amt : 0 %>" placeholder="Debit Amount" style="width:100%;">
       </div>
       <div style="display:flex; flex-direction:column; gap:4px; min-width:160px; flex:2;">
        <label>Remark</label>
        <input name="review" value="<%= entry.review %>" style="width:80%;">
       </div>
       <div class="form-actions">
        <button class="new-entry-btn" type="submit">Save</button>
        <button type="button" onclick="closeEditForm('<%= entry.id %>')">Cancel</button>
       </div>
      </form>
     </td>
    </tr>
   <% }); %>
  </tbody>
 </table>
 </div>
</body>
</html>

